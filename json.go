package main

import (
	"encoding/json"
	"fmt"
	"log"
)

//struct generated by https://mholt.github.io/json-to-go/
//TODO: read https://vk.com/dev/attachments_w for info about attachments

type Post struct {
	ID          int    `json:"id"`
	FromID      int    `json:"from_id"`
	OwnerID     int    `json:"owner_id"`
	Date        int    `json:"date"`
	MarkedAsAds int    `json:"marked_as_ads"`
	PostType    string `json:"post_type"`
	Text        string `json:"text"`
	IsPinned    int    `json:"is_pinned"`
	Attachments []struct {
		Type  string `json:"type"`
		Video struct {
			ID             int    `json:"id"`
			OwnerID        int    `json:"owner_id"`
			Title          string `json:"title"`
			Duration       int    `json:"duration"`
			Description    string `json:"description"`
			Date           int    `json:"date"`
			Comments       int    `json:"comments"`
			Views          int    `json:"views"`
			Width          int    `json:"width"`
			Height         int    `json:"height"`
			Photo130       string `json:"photo_130"`
			Photo320       string `json:"photo_320"`
			Photo800       string `json:"photo_800"`
			IsFavorite     bool   `json:"is_favorite"`
			AccessKey      string `json:"access_key"`
			FirstFrame320  string `json:"first_frame_320"`
			FirstFrame160  string `json:"first_frame_160"`
			FirstFrame130  string `json:"first_frame_130"`
			FirstFrame1280 string `json:"first_frame_1280"`
			FirstFrame800  string `json:"first_frame_800"`
			CanAdd         int    `json:"can_add"`
		} `json:"video"`
		Photo struct {
			ID      int `json:"id"`
			AlbumID int `json:"album_id"`
			OwnerID int `json:"owner_id"`
			UserID  int `json:"user_id"`
			Sizes   []struct {
				Type   string `json:"type"`
				URL    string `json:"url"`
				Width  int    `json:"width"`
				Height int    `json:"height"`
			} `json:"sizes"`
			Text      string `json:"text"`
			Date      int    `json:"date"`
			PostID    int    `json:"post_id"`
			AccessKey string `json:"access_key"`
		} `json:"photo"`
	} `json:"attachments"`
	PostSource struct {
		Type string `json:"type"`
	} `json:"post_source"`
	Comments struct {
		Count         int  `json:"count"`
		CanPost       int  `json:"can_post"`
		GroupsCanPost bool `json:"groups_can_post"`
	} `json:"comments"`
	Likes struct {
		Count      int `json:"count"`
		UserLikes  int `json:"user_likes"`
		CanLike    int `json:"can_like"`
		CanPublish int `json:"can_publish"`
	} `json:"likes"`
	Reposts struct {
		Count        int `json:"count"`
		UserReposted int `json:"user_reposted"`
	} `json:"reposts"`
	Views struct {
		Count int `json:"count"`
	} `json:"views"`
	IsFavorite bool `json:"is_favorite"`
}

func parseJSON() {

	type mmn struct {
		Rows []struct {
			ID                 string  `json:"id"`
			AccountID          string  `json:"accountId"`
			MinimumBalance     float64 `json:"minimumBalance"`
			ModificationsCount int     `json:"modificationsCount"`
			IsSerialTrackable  bool    `json:"isSerialTrackable"`
			Stock              float64 `json:"stock"`
			Reserve            float64 `json:"reserve"`
			InTransit          float64 `json:"inTransit"`
			Quantity           float64 `json:"quantity"`
		} `json:"rows"`
	}

	body1 := []byte(`{
    "rows": [
        {
            "id": "01ae6145-90a3-11e7-7a69-8f55000cda4b",
            "accountId": "8757f3bf-8504-11e7-7a69-971100001fef",
            "minimumBalance": 1000.0,
            "modificationsCount": 0,
            "isSerialTrackable": false,
            "stock": 1450.0,
            "reserve": 60.0,
            "inTransit": 0.0,
            "quantity": 1390.0
        }
    ]
	}`)
	var app = mmn{}
	err1 := json.Unmarshal(body1, &app)
	if err1 != nil {
		log.Fatal("error")
	}

	// итерируем
	for _, row := range app.Rows {
		fmt.Println(row.ID)
	}
}
