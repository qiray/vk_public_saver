package main

import "net/http"

//TODO: read https://vk.com/dev/attachments_w for more info about attachments
/*
5. Документ (type = doc)
6. Граффити (type = graffiti)
7. Ссылка (type = link)
8. Заметка (type = note)
9. Контент приложения (type = app)
10. Опрос (type = poll)
11. Вики-страница (type = page)
12. Альбом с фотографиями (type=album)
13. Список фотографий (type=photos_list)
14. Товар (type = market)
15. Подборка товаров (type = market_album)
16. Карточки (type = pretty_cards)
*/

//Most structs are generated by https://mholt.github.io/json-to-go/

//Attachment - common struct for vk attachment (photo, video, poll etc.)
type Attachment struct {
	Type  string `json:"type"`
	Photo struct {
		ID      int `json:"id"`
		AlbumID int `json:"album_id"`
		OwnerID int `json:"owner_id"`
		UserID  int `json:"user_id"`
		Sizes   []struct {
			Type   string `json:"type"`
			URL    string `json:"url"`
			Width  int    `json:"width"`
			Height int    `json:"height"`
		} `json:"sizes"`
		Text      string `json:"text"`
		Date      int    `json:"date"`
		PostID    int    `json:"post_id"`
		AccessKey string `json:"access_key"`
	} `json:"photo"`
	PostedPhoto struct {
		ID       int    `json:"id"`
		OwnerID  int    `json:"owner_id"`
		Photo130 string `json:"photo_130"`
		Photo604 string `json:"photo_604"`
	} `json:"posted_photo"`
	Video struct {
		ID             int    `json:"id"`
		OwnerID        int    `json:"owner_id"`
		Title          string `json:"title"`
		Duration       int    `json:"duration"`
		Description    string `json:"description"`
		Date           int    `json:"date"`
		Comments       int    `json:"comments"`
		Views          int    `json:"views"`
		Width          int    `json:"width"`
		Height         int    `json:"height"`
		Photo130       string `json:"photo_130"`
		Photo320       string `json:"photo_320"`
		Photo800       string `json:"photo_800"`
		IsFavorite     bool   `json:"is_favorite"`
		AccessKey      string `json:"access_key"`
		FirstFrame320  string `json:"first_frame_320"`
		FirstFrame160  string `json:"first_frame_160"`
		FirstFrame130  string `json:"first_frame_130"`
		FirstFrame1280 string `json:"first_frame_1280"`
		FirstFrame800  string `json:"first_frame_800"`
		CanAdd         int    `json:"can_add"`
	} `json:"video"`
	Audio struct {
		ID         int    `json:"id"`
		OwnerID    int    `json:"owner_id"`
		Artist     string `json:"artist"`
		Title      string `json:"title"`
		Duration   int    `json:"duration"`
		Date       int    `json:"date"`
		AlbumID    int    `json:"album_id"`
		IsHq       bool   `json:"is_hq"`
		TrackCode  string `json:"track_code"`
		IsExplicit bool   `json:"is_explicit"`
	} `json:"audio"`
}

//Post - type for vk post structure
type Post struct {
	ID          int          `json:"id"`
	FromID      int          `json:"from_id"`
	OwnerID     int          `json:"owner_id"`
	Date        int          `json:"date"`
	MarkedAsAds int          `json:"marked_as_ads"`
	PostType    string       `json:"post_type"`
	Text        string       `json:"text"`
	IsPinned    int          `json:"is_pinned"`
	Attachments []Attachment `json:"attachments"`
	Comments    struct {
		Count int `json:"count"`
	} `json:"comments"`
	Likes struct {
		Count int `json:"count"`
	} `json:"likes"`
	Reposts struct {
		Count int `json:"count"`
	} `json:"reposts"`
	Views struct {
		Count int `json:"count"`
	} `json:"views"`
}

//PostsResponse - response struct
type PostsResponse struct {
	Response []struct {
		Count int    `json:"count"`
		Items []Post `json:"items"`
	} `json:"response"`
}

//AppSettings - struct for application settings
type AppSettings struct {
	AppID       string `json:"app_id"`
	Settings    string `json:"settings"`
	RedirectURL string `json:"redirect_url"`
	APIVersion  string `json:"api_version"`
	userdata    map[string]string
	client      *http.Client
	token       string
}
